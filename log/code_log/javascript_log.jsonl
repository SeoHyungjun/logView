{"role": "user", "content": "JavaScript에서 비동기 작업을 처리하는 최신 방법은 무엇인가요?"}
{"role": "assistant", "content": "`async/await` 구문이 가장 최신이고 권장되는 방법입니다.\n```javascript\nasync function fetchData() {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('데이터를 가져오는 중 오류 발생:', error);\n  }\n}\nfetchData();\n```"}
{"role": "user", "content": "Promise는 여전히 사용되나요?"}
{"role": "assistant", "content": "네, `async/await`는 Promise 위에 구축되었으므로 Promise는 여전히 중요합니다. 특히 여러 비동기 작업을 병렬로 실행할 때 `Promise.all`과 같은 메서드가 유용합니다.\n```javascript\nPromise.all([fetch('/api/users'), fetch('/api/products')])\n  .then(responses => Promise.all(responses.map(res => res.json())))\n  .then(data => {\n    console.log('사용자:', data[0]);\n    console.log('제품:', data[1]);\n  })\n  .catch(error => console.error('오류:', error));\n```"}